// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  USER
  PROFESSIONAL
}

// Models
model User {
  id                       String        @id @default(uuid())
  name                     String
  email                    String        @unique
  emailVerified            DateTime?     @map("email_verified")
  passwordHash             String        @default("")
  image                    String?
  role                     Role          @default(USER)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  accounts                 Account[]
  sessions                 Session[]
  profession               Profession?
  userAppointments         Appointment[] @relation("userAppointment")
  professionalAppointments Appointment[] @relation("professionalAppointment")

  @@map("users")
}

model Profession {
  id             String @id @unique @default(uuid())
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  specialisation String
  licenseNumber  String
  phoneNo        String
  fee            Int
  city           String
  state          String
}

model Slot {
  id          String        @id @unique @default(uuid())
  from        DateTime      @db.Time()
  to          DateTime      @db.Time()
  appointment Appointment[]
}

model Appointment {
  id             String   @id @unique @default(uuid())
  userId         String
  user           User     @relation("userAppointment", fields: [userId], references: [id])
  professionalId String
  professional   User     @relation("professionalAppointment", fields: [professionalId], references: [id])
  name           String
  email          String
  date           DateTime
  slotId         String
  slot           Slot     @relation(fields: [slotId], references: [id])
  createdAt      DateTime @default(now())
}

// Next-Auth Models
model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
